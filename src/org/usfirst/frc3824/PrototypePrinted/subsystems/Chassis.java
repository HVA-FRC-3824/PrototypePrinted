// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.PrototypePrinted.subsystems;

import org.usfirst.frc3824.PrototypePrinted.RobotMap;
import org.usfirst.frc3824.PrototypePrinted.commands.*;
import org.usfirst.frc3824.PrototypePrinted.Constants;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Chassis extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.chassisGyro;
    private final CANTalon rightMotorB = RobotMap.chassisRightMotorB;
    private final CANTalon rightMotorA = RobotMap.chassisRightMotorA;
    private final CANTalon leftMotorA = RobotMap.chassisLeftMotorA;
    private final CANTalon leftMotorB = RobotMap.chassisLeftMotorB;
    private final RobotDrive wCDrive4 = RobotMap.chassisWCDrive4;
    private final Compressor compressor = RobotMap.chassisCompressor;
    private final Solenoid transmission = RobotMap.chassisTransmission;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// used as the value for drive while running under PIDControl. Those values
	// not set by the controller can be set by a command directly
	private double magnitude;
	private double direction;
	private double angle;

	private AnglePIDOutput angleOutput = new AnglePIDOutput();

	private PIDController angleGyroController = new PIDController(Constants.DRIVETRAIN_DRIVE_STRAIGHT_P, Constants.DRIVETRAIN_DRIVE_STRAIGHT_I, Constants.DRIVETRAIN_DRIVE_STRAIGHT_D, gyro, angleOutput);

	/**
	 * Method to set the default command for the Chassis
	 */
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	}

	/**
	 * Method to control the drive through the specified joystick
	 */
	public void driveWithJoystick(Joystick stick)
	{
		// Drive with arcade with the Y axis for forward/backward and
		// steer with twist
		wCDrive4.arcadeDrive(stick.getY(), stick.getTwist(), false);
	}

	/**
	 * Method to stop the chassis drive motors
	 */
	public void stop()
	{
		wCDrive4.arcadeDrive(0, 0);
	}

	/**
	 * Method to shift the drive train
	 */
	public void shiftGear(boolean gearHigh)
	{
		// Control the gear shift piston
		transmission.set(gearHigh);
	}

	public AnalogGyro getGyro()
	{
		return (gyro);
	}

	public double getGyroValue()
	{
		return (gyro.getAngle());
	}

	public double getRelativeAngle()
	{
		double absAngle = gyro.getAngle();

		if (absAngle < 0.0)
		{
			while (absAngle < 0.0)
			{
				absAngle += 360.0;
			}
		}
		else if (absAngle >= 360.0)
		{
			while (absAngle >= 360.0)
			{
				absAngle -= 360.0;
			}
		}

		return absAngle;
	}

	public void resetGyro()
	{
		gyro.reset();
	}

	/**
	 * Only to be used while controlled by PID controller
	 */
	public void setMagnitude(double magnitude)
	{
		this.magnitude = magnitude;
	}

	/**
	 * Only to be used while controlled by PID controller
	 */
	public void setDirection(double direction)
	{
		this.direction = direction;
	}

	/**
	 * Only to be used while controlled by PID controller
	 */
	public void setAngle(double angle)
	{
		this.angle = angle;
	}

	public PIDController getAngleGyroController()
	{
		return (angleGyroController);
	}

	public class AnglePIDOutput implements PIDOutput
	{
		public void pidWrite(double d)
		{
			SmartDashboard.putNumber("magnitude", magnitude);
			SmartDashboard.putNumber("direction", direction);
			SmartDashboard.putNumber("angle", angle);

			// set the local angle value
			setAngle(d);

			// Drive the robot given the speed and curve/direction
			wCDrive4.drive(magnitude, direction);
		}
	}
}
