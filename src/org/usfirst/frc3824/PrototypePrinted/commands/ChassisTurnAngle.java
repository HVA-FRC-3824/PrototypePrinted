// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.PrototypePrinted.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.PrototypePrinted.Constants;
import org.usfirst.frc3824.PrototypePrinted.Robot;

/**
 *
 */
public class ChassisTurnAngle extends Command
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_TurnDegrees;
	private double m_DrivePower;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ChassisTurnAngle(double TurnDegrees, double DrivePower)
	{

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_TurnDegrees = TurnDegrees;
		m_DrivePower = DrivePower;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.chassis);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Set the target turn angle based on the present gyro value and the 
		// desired turn degrees
		double goToGyro = Robot.chassis.getGyro().getAngle() + m_TurnDegrees;

		// Set angle for turning
		Robot.chassis.getAngleGyroController().setPID(Constants.DRIVETRAIN_TURN_ANGLE_P, 
		                                              Constants.DRIVETRAIN_TURN_ANGLE_I, 
		                                              Constants.DRIVETRAIN_TURN_ANGLE_D);

		Robot.chassis.setMagnitude(m_DrivePower);
		
		Robot.chassis.getAngleGyroController().reset();
		Robot.chassis.getAngleGyroController().setAbsoluteTolerance(Constants.TURN_THRESHOLD);
		Robot.chassis.getAngleGyroController().setSetpoint(goToGyro);
		Robot.chassis.getAngleGyroController().enable();		
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		// return PIDcontroller.OnTarget();
		return Math.abs(Robot.chassis.getAngleGyroController().getSetpoint() - 
		                Robot.chassis.getGyro().pidGet()) < Constants.TURN_THRESHOLD;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID controller
		Robot.chassis.getAngleGyroController().disable();
		Robot.chassis.holonomicDrive(0.0, 0.0, 0.0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
